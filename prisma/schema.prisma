// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  // set to `prisma` when using PlanetScale database, otherwise set to `foreignKeys`
  relationMode = "prisma"
}

model Customer {
  id           String  @id @default(uuid())
  name         String?
  phone_number String  @unique
  rides        Ride[]

  created_at         DateTime            @default(now())
  updated_at         DateTime            @updatedAt
  CustomerPhoneToken CustomerPhoneToken?
}

model CustomerPhoneToken {
  id String @id @default(uuid())

  customer    Customer @relation(fields: [customer_id], references: [id])
  customer_id String   @unique
  otp         String   @unique @db.Char(6)

  created_at DateTime @default(now())

  @@index([otp])
}

model Driver {
  id           String  @id @default(uuid())
  name         String?
  phone_number String  @unique
  balance      Decimal @default(0) @db.Decimal(12, 2)

  car         Car?
  rides       Ride[]
  ride_offers RideOffer[]

  created_at DateTime           @default(now())
  phone_auth DriverPhoneToken[]
}

model DriverPhoneToken {
  id String @id @default(uuid())

  driver    Driver @relation(fields: [driver_id], references: [id])
  driver_id String @unique
  otp       String @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Car {
  id             String  @id @default(uuid())
  license_number String  @unique
  model          String?
  brand          String?

  driver    Driver @relation(fields: [driver_id], references: [id])
  driver_id String @unique
}

model Ride {
  id String @id @default(uuid())

  pickup_long Decimal @db.Decimal(20, 15)
  pickup_lat  Decimal @db.Decimal(20, 15)
  pickup_name String?
  drop_long   Decimal @db.Decimal(20, 15)
  drop_lat    Decimal @db.Decimal(20, 15)
  drop_name   String?

  comment String?

  requested_fare Decimal  @db.Decimal(12, 2)
  confirmed_fare Decimal? @db.Decimal(12, 2)

  status RideStatus @default(SEARCHING)

  requested_by Customer @relation(fields: [customer_id], references: [id])
  customer_id  String
  assigned_to  Driver?  @relation(fields: [driver_id], references: [id])
  driver_id    String?

  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  ride_offers RideOffer[]

  @@index([driver_id])
  @@index([customer_id])
}

enum RideStatus {
  SEARCHING
  BOOKED
  CANCELLED
  FINISHED
}

model RideOffer {
  id String @id @default(uuid())

  ride          Ride        @relation(fields: [ride_id], references: [id])
  ride_id       String
  driver        Driver      @relation(fields: [driver_id], references: [id])
  driver_id     String
  proposed_fare Decimal     @db.Decimal(12, 2)
  status        OfferStatus @default(PENDING)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([ride_id])
  @@index([driver_id])
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}
